"""
This module creates a new folder at a specified path as a scaffold for a new Python project.
The folder will contain a skeleton README.md file, a venv environment with standard dev tools and optionally a git
repository.

This script is intended to be invoked from the command line, using the following arguments:
--name: the name of the project, which is used to name the new folder and in the README.md file
--use-git (-g) [optional]: create a git repo in the new folder.
"""

import argparse
import os
from pathlib import Path
from shutil import copy
import sys
from dotenv import load_dotenv

print("starter - starting")

load_dotenv()

parser = argparse.ArgumentParser()
parser.add_argument("name",
                    help="Used to name the project folder and in the auto-created README.md file")
parser.add_argument("-g",
                    "--use_git",
                    help="Create and initialise a Git repo in the target folder",
                    action="store_true")
args = parser.parse_args()


class NewProject:
    """
    Represents a new project needing a standardised folder to be set up.
    """
    def __init__(self):
        if os.getenv("MODE") == 'dev':
            self.name = "STARTER_TEST_PROJECT_FOLDER"
        else:
            self.name = args.name
        self.use_git = args.use_git
        self.project_directory = Path(os.getenv("STANDARD_CODE_DIR")) / self.name
        self.cl = CommandList()

    def create_project_folder(self):
        try:
            Path.mkdir(self.project_directory)
        except FileExistsError:
            print(f"Directory already exists. Exiting")
            sys.exit()
        except Exception:
            print("Unspecified error. Exiting")
        print(f"Created directory {self.project_directory}")

        self._copy_templated_files()
        self._setup_venv()
        self._create_readme()
        if self.use_git:
            self._setup_git()

    def _copy_templated_files(self):
        files_to_copy = [
            ".gitignore",
            "requirements.txt",
            "requirements-dev.txt",
        ]

        template_folder = Path(os.getenv("TEMPLATE_DIRECTORY"))
        for file in files_to_copy:
            copy(template_folder / file, self.project_directory)

    def _setup_venv(self):
        print("Setting up virtual environment...")
        os.chdir(self.project_directory)
        os.system(self.cl.venv_command_string)

    def _create_readme(self):
        print("Creating README.md")
        with open(f"{self.project_directory}/README.md", "w") as fout:
            fout.write(f"# {self.name}\n")

    def _setup_git(self):
        print("Setting up git...")
        os.chdir(self.project_directory)
        os.system(self.cl.git_command_string)

    def __str__(self):
        return f"NewProject instance. Name: {self.name}. Use git: {self.use_git}"

    def __repr__(self):
        return f"NewProject instance. Name: {self.name}. Use git: {self.use_git}"


class CommandList:
    def __init__(self):
        # Commands in this list will execute in order
        self._venv_commands = [
            "python3 -m venv .venv",
            "source ./.venv/bin/activate",
            "python3 -m pip install --upgrade pip",
            "python3 -m pip install -r requirements-dev.txt"
        ]

        # Commands in this list will execute in order
        self._git_commands = [
            "git init",
            "git add .",
            'git commit -m "initial commit, autogenerated by start script"',
            "git status",
        ]
        self.venv_command_string = " && ".join(self._venv_commands)
        self.git_command_string = " && ".join(self._git_commands)


new_project = NewProject()
new_project.create_project_folder()
